service: chromda

custom:
  # The bucket used for deploying the lambda
  s3Bucket: bordercore-chromda
  # The bucket used for creating the thumbnails
  s3BucketThumbnails: bordercore-blobs
  snsTopic: chromda

provider:
  name: aws
  region: ${opt:region, "us-east-1"}
  versionFunctions: false
  layers:
    # Google Chrome for AWS Lambda as a layer
    # Make sure you use the latest version depending on the region
    # https://github.com/shelfio/chrome-aws-lambda-layer
    - arn:aws:lambda:${self:provider.region}:764866452798:layer:chrome-aws-lambda:47
    # dependencies layer
    - { Ref: ChromdaLambdaLayer }
  runtime: nodejs20.x
  memorySize: 2048
  timeout: 30
  tracing:
    lambda: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
          Resource: "*"
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:PutObjectAcl
          # If you plan to support multiple buckets via request parameter,
          # add all possible buckets here
          Resource: arn:aws:s3:::${self:custom.s3BucketThumbnails}/*
  # See the API Gateway event below for additional details on api keys
  # apiKeys:
  #   - key1

functions:
  captureScreenshot:
    handler: src/captureScreenshot.handler
    description: Captures a screenshot of a webpage.
    environment:
      S3_REGION: ${self:provider.region}
      S3_BUCKET: ${self:custom.s3BucketThumbnails}
      # Optional vars
      CHROMIUM_ARGS: "[]"
      TIMEOUT: "30000"
      IGNORE_HTTPS_ERRORS: "false"
      VIEWPORT_WIDTH: "1920"
      VIEWPORT_HEIGHT: "1200"
      DEVICE_SCALE_FACTOR: "1"
      IS_MOBILE: "false"
      IS_LANDSCAPE: "false"
    events:
      # SNS Event
      - sns:
          arn: !Ref chromdaTopic
          topicName: ${self:custom.snsTopic}
      # API Gateway Events
      # - http:
      #     path: capture
      #     method: post
      # Uncomment the provider api key section above as well as the line
      # below to enable private endpoint support
      #     private: true
      # TODO: add SQS event
      # TODO: add Scheduled event

layers:
  chromda:
    package:
      # This file will be created during `npm run deploy`
      artifact: layer/export/layer.zip

package:
  exclude:
    - layer/**
    - node_modules/**
    - package.json
    - yarn.lock

resources:
  Resources:
    # Bucket where the screenshots are stored
    chromdaBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Delete
      Properties:
        BucketName: ${self:custom.s3Bucket}
        AccessControl: Private
    # Change this if you don't want public read access
    chromdaBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
              Principal: "*"
              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*
        Bucket:
          Ref: chromdaBucket
    chromdaTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.snsTopic}

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
